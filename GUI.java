package proyectoaed;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.view.mxGraph;
import java.awt.BorderLayout;
import java.awt.Font;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 *
 * @author jossu
 */
public class GUI extends javax.swing.JFrame {
    ArrayList<GrafoDirigidoAciclico> grafos=new ArrayList();
    int indiceActual = 0;
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        indiceActual=0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BG = new javax.swing.JPanel();
        datosPanel = new javax.swing.JPanel();
        constructorBox = new javax.swing.JComboBox<>();
        matrizCheck = new javax.swing.JCheckBox();
        listaCheck = new javax.swing.JCheckBox();
        dibujoCheck = new javax.swing.JCheckBox();
        verticesField = new javax.swing.JTextField();
        agregarGrafo = new javax.swing.JButton();
        crearGrafo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        letrasCheck = new javax.swing.JCheckBox();
        Aristas = new javax.swing.JPanel();
        aristasField = new javax.swing.JTextField();
        agregarAristaBt = new javax.swing.JButton();
        eliminarAristas = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        anteriorBt = new javax.swing.JButton();
        siguienteBt = new javax.swing.JButton();
        dibujoGrafo = new javax.swing.JPanel();
        mostrarBt = new javax.swing.JButton();
        OrdenarBt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BG.setBackground(new java.awt.Color(255, 255, 255));
        BG.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        datosPanel.setBackground(new java.awt.Color(51, 153, 255));

        constructorBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vertices con valores aleatorios", "Vertices con valores ordenados" }));

        matrizCheck.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        matrizCheck.setForeground(new java.awt.Color(0, 0, 0));
        matrizCheck.setText("Matriz de adyacencia");

        listaCheck.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        listaCheck.setForeground(new java.awt.Color(0, 0, 0));
        listaCheck.setText("Lista de adyacencia");

        dibujoCheck.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        dibujoCheck.setForeground(new java.awt.Color(0, 0, 0));
        dibujoCheck.setText("Dibujo");

        verticesField.setText("No. vertices");
        verticesField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verticesFieldActionPerformed(evt);
            }
        });

        agregarGrafo.setText("Agregar");
        agregarGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarGrafoActionPerformed(evt);
            }
        });

        crearGrafo.setText("Crear ");
        crearGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearGrafoActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Crear grafo");

        letrasCheck.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        letrasCheck.setForeground(new java.awt.Color(0, 0, 0));
        letrasCheck.setText("Usar letras");

        javax.swing.GroupLayout datosPanelLayout = new javax.swing.GroupLayout(datosPanel);
        datosPanel.setLayout(datosPanelLayout);
        datosPanelLayout.setHorizontalGroup(
            datosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datosPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(datosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(datosPanelLayout.createSequentialGroup()
                        .addComponent(crearGrafo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(agregarGrafo)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(datosPanelLayout.createSequentialGroup()
                        .addGroup(datosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(datosPanelLayout.createSequentialGroup()
                                .addGroup(datosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(datosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(listaCheck, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(matrizCheck, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(dibujoCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(verticesField, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 138, Short.MAX_VALUE))
                            .addGroup(datosPanelLayout.createSequentialGroup()
                                .addComponent(constructorBox, 0, 1, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(letrasCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
            .addGroup(datosPanelLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        datosPanelLayout.setVerticalGroup(
            datosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datosPanelLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(datosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(constructorBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(letrasCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(verticesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(matrizCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(listaCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dibujoCheck)
                .addGap(49, 49, 49)
                .addGroup(datosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(crearGrafo)
                    .addComponent(agregarGrafo))
                .addGap(59, 59, 59))
        );

        BG.add(datosPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 290, 260));

        Aristas.setBackground(new java.awt.Color(0, 153, 255));

        aristasField.setText("Arista tipo \"A,B\"");

        agregarAristaBt.setText("Agregar arista");
        agregarAristaBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarAristaBtActionPerformed(evt);
            }
        });

        eliminarAristas.setText("Eliminar aristas");
        eliminarAristas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarAristasActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Crear aristas");

        javax.swing.GroupLayout AristasLayout = new javax.swing.GroupLayout(Aristas);
        Aristas.setLayout(AristasLayout);
        AristasLayout.setHorizontalGroup(
            AristasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AristasLayout.createSequentialGroup()
                .addGroup(AristasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AristasLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AristasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(AristasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(aristasField)
                            .addComponent(agregarAristaBt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(eliminarAristas)))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        AristasLayout.setVerticalGroup(
            AristasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AristasLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(13, 13, 13)
                .addComponent(aristasField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AristasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agregarAristaBt)
                    .addComponent(eliminarAristas))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        BG.add(Aristas, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 320, 290, 100));

        anteriorBt.setText("Anterior");
        anteriorBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anteriorBtActionPerformed(evt);
            }
        });
        BG.add(anteriorBt, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, -1, -1));

        siguienteBt.setText("Siguiente");
        siguienteBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteBtActionPerformed(evt);
            }
        });
        BG.add(siguienteBt, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 450, -1, -1));

        javax.swing.GroupLayout dibujoGrafoLayout = new javax.swing.GroupLayout(dibujoGrafo);
        dibujoGrafo.setLayout(dibujoGrafoLayout);
        dibujoGrafoLayout.setHorizontalGroup(
            dibujoGrafoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 670, Short.MAX_VALUE)
        );
        dibujoGrafoLayout.setVerticalGroup(
            dibujoGrafoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );

        BG.add(dibujoGrafo, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 70, 670, 380));

        mostrarBt.setText("Mostrar");
        mostrarBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarBtActionPerformed(evt);
            }
        });
        BG.add(mostrarBt, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 450, -1, -1));

        OrdenarBt.setText("Ordenar");
        OrdenarBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdenarBtActionPerformed(evt);
            }
        });
        BG.add(OrdenarBt, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 450, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BG, javax.swing.GroupLayout.DEFAULT_SIZE, 1023, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void agregarGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarGrafoActionPerformed
        // TODO add your handling code here:
        try {
            
            File fileToSave = new File("C:\\Users\\jossu\\OneDrive\\Escritorio\\Grafos guardados\\grafos" + indiceActual + ".txt");
            LocalDateTime ahora = LocalDateTime.now();
            DateTimeFormatter formato = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String fechaHora = ahora.format(formato);

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {
                writer.write("Fecha y hora de creación: " + fechaHora);
                writer.newLine();
                writer.newLine();
                writer.write(grafos.get(indiceActual).toString());
                writer.newLine();
                JOptionPane.showMessageDialog(this, "Grafo guardado exitosamente en formato texto.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Ocurrió un error al guardar los grafos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_agregarGrafoActionPerformed

    private void eliminarAristasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarAristasActionPerformed
        // TODO add your handling code here:
        grafos.get(indiceActual).eliminarAristas();
    }//GEN-LAST:event_eliminarAristasActionPerformed

    private void crearGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearGrafoActionPerformed
        
        int n = Integer.parseInt(verticesField.getText());
        String seleccion = (String) constructorBox.getSelectedItem();
        boolean usarLetras = letrasCheck.isSelected();
        boolean randomVertices = false;
        if (seleccion.equals("Vertices con valores aleatorios")) {
            randomVertices = true;
        } else if (seleccion.equals("Vertices con valores ordenados")) {
            randomVertices = false;
        } else {
            randomVertices = false;
        }

        // Crear el grafo con el constructor adecuado
        GrafoDirigidoAciclico grafo;
        if (seleccion.equals("Vertices con valores ordenados")) {
            grafo = new GrafoDirigidoAciclico(n, usarLetras, randomVertices);
        } else if (seleccion.equals("Vertices con valores aleatorios")) {
            grafo = new GrafoDirigidoAciclico(n, usarLetras, randomVertices);
        }
        else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una opción válida en el combo box.", "Error", JOptionPane.ERROR_MESSAGE);
            return; 
        }
        grafos.add(grafo);
        
        if(seleccion.equals("Vertices con valores aleatorios")){
            JTextArea textArea = new JTextArea();
            textArea.setEditable(false); 
            textArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
            Map<String, List<String>> listaAdyacencia = grafo.getListaAdyacencia();
            StringBuilder sb = new StringBuilder();
            for (String vertice : listaAdyacencia.keySet()) {
                sb.append(vertice).append(": ");  
                List<String> vecinos = listaAdyacencia.get(vertice);

                if (vecinos.isEmpty()) {
                    sb.append("Sin aristas\n");
                } else {
                    for (String vecino : vecinos) {
                        sb.append(vecino).append(" ");
                    }
                    sb.append("\n");
                }
            }

            textArea.setText(sb.toString());
            JFrame frame = new JFrame("Lista de los vertices");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.setSize(400, 400); 
            frame.setLocationRelativeTo(null); 
            JScrollPane scrollPane = new JScrollPane(textArea);
            frame.add(scrollPane);
            frame.setVisible(true);
            }
        if(indiceActual!=0){
            indiceActual++;
        }
    }//GEN-LAST:event_crearGrafoActionPerformed

    private void agregarAristaBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarAristaBtActionPerformed
        // TODO add your handling code here:
        agregarArista(grafos.get(indiceActual));
    }//GEN-LAST:event_agregarAristaBtActionPerformed

    private void anteriorBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anteriorBtActionPerformed
        // TODO add your handling code here:
        if(indiceActual>-1){
            indiceActual--;
            verificarTipoImpresion();
            verticesField.setText(Integer.toString(grafos.get(indiceActual).getN()));
            
        }
        else{
            JOptionPane.showMessageDialog(this,"No hay grafos anteriores a este, se regresa.");
        }
    }//GEN-LAST:event_anteriorBtActionPerformed

    private void siguienteBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteBtActionPerformed
        // TODO add your handling code here:
        if(indiceActual==grafos.size()){
            JOptionPane.showMessageDialog(this,"No hay grafo siguiente a este. se regresa");
        }
        else{
            indiceActual++;
            verificarTipoImpresion();
            
        }
    }//GEN-LAST:event_siguienteBtActionPerformed

    private void mostrarBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarBtActionPerformed
        // TODO add your handling code here:
        verificarTipoImpresion();
    }//GEN-LAST:event_mostrarBtActionPerformed

    private void verticesFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verticesFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_verticesFieldActionPerformed

    private void OrdenarBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdenarBtActionPerformed
        // TODO add your handling code here:
        grafos.get(indiceActual).topologicalSort();
        JOptionPane.showMessageDialog(this,"El grafo ha sido ordenado de manera correcta.");
        System.out.println(grafos.get(indiceActual).topologicalSort());
    }//GEN-LAST:event_OrdenarBtActionPerformed

    
    private void verificarTipoImpresion() {
        if (listaCheck.isSelected()) {
            mostrarListaAdyacencia(grafos.get(indiceActual));
        }
        if (matrizCheck.isSelected()) {
            mostrarMatrizAdyacencia(grafos.get(indiceActual));
        }
        if (dibujoCheck.isSelected()) {
            dibujarGrafo(grafos.get(indiceActual));
        }
    }
    public void dibujarGrafo(GrafoDirigidoAciclico grafo) {
        mxGraph graph = new mxGraph();
        Object parent = graph.getDefaultParent();
        graph.getModel().beginUpdate();

        try {
            Map<String, Object> vertexMap = new HashMap<>();
            for (String vertex : grafo.getListaAdyacencia().keySet()) {
                vertexMap.put(vertex, graph.insertVertex(parent, null, vertex, 50, 50, 80, 30));
            }
            for (String vertex : grafo.getListaAdyacencia().keySet()) {
                for (String vecino : grafo.obtenerVecinos(vertex)) {
                    graph.insertEdge(parent, null, "", vertexMap.get(vertex), vertexMap.get(vecino));
                }
            }
        } finally {
            graph.getModel().endUpdate();
        }

        mxGraphComponent graphComponent = new mxGraphComponent(graph);
        graphComponent.setPreferredSize(dibujoGrafo.getSize());
        if (!(dibujoGrafo.getLayout() instanceof BorderLayout)) {
            dibujoGrafo.setLayout(new BorderLayout());
        }
        dibujoGrafo.removeAll();
        dibujoGrafo.add(graphComponent, BorderLayout.CENTER);
        dibujoGrafo.revalidate();
        dibujoGrafo.repaint();
        graphComponent.zoomAndCenter();
        if (grafo.getListaAdyacencia().isEmpty()) {
            System.out.println("Advertencia: El grafo no tiene vértices.");
        }
    }
    
    public void mostrarMatrizAdyacencia(GrafoDirigidoAciclico grafo) {
        JTextArea textArea = new JTextArea();
        textArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
        boolean[][] matrizAdyacencia = grafo.getMatrizAdyacencia();
        StringBuilder sb = new StringBuilder();
        sb.append("\t");
        for (int i = 0; i < grafo.getN(); i++) {
            sb.append(i).append("\t");
        }
        sb.append("\n");
        for (int i = 0; i < grafo.getN(); i++) {
            sb.append(i).append("\t");
            for (int j = 0; j < grafo.getN(); j++) {
                sb.append(matrizAdyacencia[i][j] ? "1" : "0").append("\t");
            }
            sb.append("\n");
        }
        textArea.setText(sb.toString());
        JFrame frame = new JFrame("Matriz de Adyacencia");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(400, 400);
        frame.setLocationRelativeTo(null); 
        JScrollPane scrollPane = new JScrollPane(textArea);
        frame.add(scrollPane);
        frame.setVisible(true);
    }
    
    public void agregarArista(GrafoDirigidoAciclico grafo) {
        String input = aristasField.getText().trim();
        if (input.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor ingresa una arista en el formato 'A,B'.");
            return;
        }
        if (!input.contains(",")) {
            JOptionPane.showMessageDialog(null, "El formato de la arista no es válido. Usa el formato 'A,B'.");
            return;
        }
        String[] vertices = input.split(",");
        if (vertices.length != 2) {
            JOptionPane.showMessageDialog(null, "El formato de la arista no es válido. Usa el formato 'A,B'.");
            return;
        }

        String origen = vertices[0].trim();
        String destino = vertices[1].trim();
        if (!grafo.getListaAdyacencia().containsKey(origen) || !grafo.getListaAdyacencia().containsKey(destino)) {
            JOptionPane.showMessageDialog(null, "Uno o ambos vértices no existen en el grafo.");
            return;
        }
        if (grafo.insertarArista(origen, destino)) {
            JOptionPane.showMessageDialog(null, "Arista agregada: " + origen + " -> " + destino);
        } else {
            JOptionPane.showMessageDialog(null, "No se pudo agregar la arista (posible ciclo).");
        }
    }
    
    public void mostrarListaAdyacencia(GrafoDirigidoAciclico grafo) {
        JTextArea textArea = new JTextArea();
        textArea.setEditable(false); 
        textArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
        Map<String, List<String>> listaAdyacencia = grafo.getListaAdyacencia();
        StringBuilder sb = new StringBuilder();
        for (String vertice : listaAdyacencia.keySet()) {
            sb.append(vertice).append(": ");  
            List<String> vecinos = listaAdyacencia.get(vertice);
            
            if (vecinos.isEmpty()) {
                sb.append("No tiene vecinos\n");
            } else {
                for (String vecino : vecinos) {
                    sb.append(vecino).append(" ");
                }
                sb.append("\n");
            }
        }

        textArea.setText(sb.toString());
        JFrame frame = new JFrame("Lista de Adyacencia");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(400, 400); 
        frame.setLocationRelativeTo(null); 
        JScrollPane scrollPane = new JScrollPane(textArea);
        frame.add(scrollPane);
        frame.setVisible(true);
    }
   
   
   
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Aristas;
    private javax.swing.JPanel BG;
    private javax.swing.JButton OrdenarBt;
    private javax.swing.JButton agregarAristaBt;
    private javax.swing.JButton agregarGrafo;
    private javax.swing.JButton anteriorBt;
    private javax.swing.JTextField aristasField;
    private javax.swing.JComboBox<String> constructorBox;
    private javax.swing.JButton crearGrafo;
    private javax.swing.JPanel datosPanel;
    private javax.swing.JCheckBox dibujoCheck;
    private javax.swing.JPanel dibujoGrafo;
    private javax.swing.JButton eliminarAristas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JCheckBox letrasCheck;
    private javax.swing.JCheckBox listaCheck;
    private javax.swing.JCheckBox matrizCheck;
    private javax.swing.JButton mostrarBt;
    private javax.swing.JButton siguienteBt;
    private javax.swing.JTextField verticesField;
    // End of variables declaration//GEN-END:variables
}
